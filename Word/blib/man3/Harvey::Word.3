.\" Automatically generated by Pod::Man version 1.15
.\" Tue Jan  8 12:01:06 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Word 3"
.TH Word 3 "perl v5.6.1" "2002-01-08" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Harvey::Word \- Perl extension for creating word objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Harvey::Word;
\&  my $W = Word->new("grape");
.Ve
.Vb 2
\&    Word object module for Harvey.  Looks up information on
\&    a word for all forms and gives information to calling objects.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&  The purpose of the Word module is to create Word objects that can be 
\&  queried for syntactic information about the word.
.Ve
.Vb 5
\&    Version 1.01, words can be queried for their dictionary form, part 
\&    of speech, many attributes on the basis of the part of speech, 
\&    frequency, what persons are possible, i.e. 1st singular, 3rd plural, 
\&    etc., and the likeliest parts of speech that the word could be based 
\&    on the frequencies in the BNC.
.Ve
.Vb 3
\&    Most methods which return a characteristic of the word can also be 
\&    used to turn on or off the characteristic by passing a 0 or 1 for
\&    boolean flags, text for text queries and numbers for the frequency.
.Ve
.Vb 3
\&    The data is used from a TIE hash database, but can be exported/imported
\&    from the ASCII file word.txt using the export_word and import_word 
\&    functions.
.Ve
.Vb 1
\&  The following methods are supported:
.Ve
.Vb 92
\&    new:        Constructor.
\&    text:       Get the text of the word.
\&    load_tie:   Load a word record from the TIE hash (%t_word) into the 
\&                memory hash (%word). Done automatically from the constructor.
\&    prioritize: Returns an ordered array of the most likely parts of speech
\&                for a given word based on the BNC frequency counts.
\&    noun:       Retuns the noun flags if the word is a noun, otherwise 0.  Can
\&                be used as a boolean test for whether the word can be a noun, 
\&                but also can set or retieve the noun flags for a word, which are
\&                stored as bytes in an integer.  To set the flags, send in an 
\&                integer as the argument.        
\&    verb:       Same as noun, but for verbs.
\&    adjective:  Same as noun, but for adjectives.
\&    adverb:     Same as noun, but for adverbs.
\&    modal:      Same as noun, but for modals.
\&    pronoun:    Same as noun, but for pronouns.
\&    preposition:        Same as noun, but for prepositions.
\&    determiner: Same as noun, but for determiners.
\&    conjunction:        Same as noun, but for conjunctions.
\&    noun_freq:  Gets/set the noun frequency.
\&    verb_freq:  Gets/set the verb frequency.
\&    adjective_freq:     Gets/set the adjective frequency.
\&    adverb_freq:        Gets/set the adverb frequency.
\&    modal_freq: Gets/set the modal frequency.
\&    pronoun_freq:       Gets/set the pronoun frequency.
\&    preposition_freq:   Gets/set the preposition frequency.
\&    determiner_freq:    Gets/set the determiner frequency.
\&    conjunction_freq:   Gets/set the conjunction frequency.
\&    coord_conjunction:  Gets/set coordinating flag for conjunctions.
\&    subord_conjunction:         Gets/set subordinating flag for conjunctions.
\&    adverb_preposition: Gets/set whether preposition can be used 
\&                        alone as adverb.
\&    base_adjective:     Gets/set base flag for adjectives.
\&    comparative_adjective:      Gets/set comparative flag for adjectives.
\&    superlative_adjective:      Gets/set superlative flag for adjectives.
\&    base_adverb:        Gets/set base adverb flag.
\&    comparative_adverb: Gets/set comparative adverb flag.
\&    superlative_adverb: Gets/set superlative adverb flag.
\&    singular determiner:        Gets/set singular flag for determiners.
\&    plural_determiner:  Get/set plural flag for determiners.
\&    standalone_determiner:      Get/set standalone flag for determiners.
\&    question_determiner:        Get/set question flag for determiners.
\&    first_pronoun:      Get/set first person flag for pronouns.
\&    second_pronoun:     Get/set second person flag for pronouns.
\&    third_pronoun:      Get/set third person flag for pronouns.
\&    singular_pronoun:   Get/set singular flag for pronouns.
\&    plural_pronoun:     Get/set plural flag for pronouns.
\&    masculine_pronoun:  Get/set masculine flag for pronouns.
\&    feminine_pronoun:   Get/set feminine flag for pronouns.
\&    neuter_pronoun:     Get/set neuter flag for pronouns.
\&    nominative_pronoun: Get/set nominative flag for pronouns.
\&    accusativey_pronoun:        Get/set accusative flag for pronouns.
\&    genitive_pronoun:   Get/set genitive flag for pronouns.
\&    person_pronoun:     Get/set person flag for pronouns.
\&    place_pronoun:      Get/set place flag for pronouns.
\&    thing_pronoun:      Get/set thing flag for pronouns.
\&    reflexive_pronoun:  Get/set reflexive flag for pronouns.
\&    question_pronoun:   Get/set question flag for pronouns.
\&    adjectival_pronoun: Get/set adjectival flag for pronouns: our your
\&    standalone_pronoun: Get/set standalone flag for pronouns: ours yours
\&    singular_noun:      Get/set singular flag for nouns.
\&    plural_noun:        Get/set plural flag for nouns.
\&    numberless_noun:    Get/set numberless flag for nouns.
\&    proper_noun:        Get/set proper flag for nouns.
\&    masculine_noun:     Get/set masculine flag for nouns.
\&    feminine_noun:      Get/set feminine flag for nouns.
\&    neuter_noun:        Get/set neuter flag for nouns.
\&    starter_noun:       Get/set starter flag for nouns.
\&    infinitive_verb:    Get/set infinitive flag for verbs.
\&    past_verb:  Get/set infinitive flag for verbs.
\&    participle_verb:    Get/set infinitive flag for verbs.
\&    third_verb: Get/set infinitive flag for verbs.
\&    gerund_verb:        Get/set infinitive flag for verbs.
\&    present_verb:       Get/set infinitive flag for verbs.
\&    starter_verb:       Get/set infinitive flag for verbs.
\&    noun_dictionary:    Get/set dictionary form for a noun, ie. singular.
\&    verb_dictionary:    Get/set dictionary form for a verb, ie. infinitive
\&    adjective_dictionary:       Get/set dictionary form for a adjective i.e. base
\&    adverb_dictionary:  Get/set dictionary form for a adverb, i.e. base form
\&    noun_persons:       Returns the possible persons for a noun.  The 'persons'
\&                        functions return an Integer with the possible persons
\&                        (i.e. first singular, second plural, etc) stored as
\&                        bits.  This makes it easy to check for Subject verb
\&                        agreement or pronoun/noun agreement by 'anding' the
\&                        flags together.
\&    pronoun_persons:    Returns the possible persons for a pronoun.
\&    verb_persons:       Returns the possible persons for a verb.
\&    tie_hash:   Ties the hash, %t_word to the file dic/word.db. 
\&    import_word:        Builds the hash TIE file 'dic/word.db' from
\&                        the text file 'word.txt'.
\&    export_word:        Exports data from the TIE file 'dic/word.db' 
\&                        to the text file 'word.txt'.
.Ve
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Meyer, <chris@mytechs.com>
.SH "COPYWRITE Copywrite (c) 2002, Chris Meyer.  All rights reserved.  This is free software and can be used under the same terms as Perl itself."
.IX Header "COPYWRITE Copywrite (c) 2002, Chris Meyer.  All rights reserved.  This is free software and can be used under the same terms as Perl itself."
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&  1.01
.Ve
.SH "RELATED LIBRARIES"
.IX Header "RELATED LIBRARIES"
.Vb 5
\&  My heartfelt thanks to Adam Kilgarriff for his work on the BNC 
\&  (British National Corpus) which forms the basis for the word.db.
\&  I have added and massaged it a bit, but I would never have gotten
\&  this far without it.  The BNC can be visited at
\&  http://www.itri.brighton.ac.uc/~Adam.Kilgarriff/bnc-readme.html.
.Ve
the perl manpage.
