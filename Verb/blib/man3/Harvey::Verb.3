.\" Automatically generated by Pod::Man version 1.15
.\" Wed Feb  6 10:08:39 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Verb 3"
.TH Verb 3 "perl v5.6.1" "2002-02-06" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Harvey::Verb \- Harvey module for parsing verbs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Harvey::Verb;
.Ve
.Vb 2
\&  The is still very much a development module.  See the website:
\&  www.mytechs.com for more details on the project.
.Ve
.Vb 2
\&  Verb.pm builds on top of Word.pm, which provides the Word objects which
\&  are used by Verb.pm.
.Ve
.Vb 4
\&  See Word.pm for information on using Word.pm to obtain information about
\&  Word objects.  Verb objects are created by passing an array of Word objects
\&  (A) which constitute a sentence, as an argument to the Verb object
\&  constructor.  $V = Verb->new(\e@A);
.Ve
.Vb 3
\&  The Verb object parses the verb in the sentence upon initialization to the
\&  best apparent parsing.  The Verb object can then be queried for information
\&  about the verb object using the following methods.
.Ve
.Vb 2
\&  See the Harvey module for a simple dialog routine that uses the Verb module
\&  to parse sentences and pull the verb information from them.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  The following methods constitute the interface to this object:
.Ve
.Vb 5
\&  new 
\&    Constructor.  Send in an array reference to a block of word objects 
\&    (Word.pm) to have the verb information parsed and made available.  If
\&    no argument is passed in, then a blank verb is set up which can be
\&    manually stuffed with information.
.Ve
.Vb 4
\&  words 
\&    Method to load or retrieve word arrays from the object.  If a word array
\&    is loaded manually after the initialization of the object, then the 
\&    parsing must be performed by a call to parse() or best().
.Ve
.Vb 4
\&  used 
\&    Returns an integer with bits set indicating which words in the array
\&    are used in the verb complex.  This will be used to match verbs against
\&    nouns in a sentence when the noun module comes out.
.Ve
.Vb 4
\&  best
\&    Calculates the best parsing of the sentence based on how many word are
\&    involved in the parsing and whether they are started off by the most
\&    common verb starters.
.Ve
.Vb 2
\&  complete_tense 
\&    Returns a string rendition of the tense of the verb in the word array.
.Ve
.Vb 2
\&  show_adverbs 
\&    Returns the adverbs in the verb complex as strings for show.
.Ve
.Vb 3
\&  tenses 
\&    Returns the Int which stores the tenses, and/or, sets the tenses if an
\&    Int is sent in.  Used mainly to set up modal verb objects from scratch.
.Ve
.Vb 3
\&  present
\&    Get/Set present tense.  Input of 1 or 0 sets or clears the present 
\&    tense.  All calls return the final status of the present tense flag.
.Ve
.Vb 2
\&  past
\&    Get/set past tense as above.
.Ve
.Vb 2
\&  perfect
\&    Get/set perfect tense as above.
.Ve
.Vb 2
\&  progressive
\&    Get/set progressive tense as above.
.Ve
.Vb 2
\&  infinitive
\&    Get/set infinitive flag as above.
.Ve
.Vb 7
\&  persons
\&    Get/set the persons information.  The persons information is stored
\&    in an integer with a flag for the 1st pers sing, 2nd sing. 3rd sing,
\&    etc.  Send in an integer to set it.  The current values is alwasys
\&    returned.  Verbs, Noun object (when they come out) both indicate what
\&    possible persons they would support.  This allows for convient checking
\&    of subject verb agreement.
.Ve
.Vb 2
\&  verb
\&    Gets/set the infinitive of the main verb as a string
.Ve
.Vb 3
\&  adverbs
\&    Get/sets the array of adverbs found in the sentence.  Arguments are 
\&    passed in and out as a reference to an array.
.Ve
.Vb 3
\&  sentence_type
\&    Get/sets the sentence type.  Arg in and out is an integer.  
\&    0 = statement, 1 = question, 2 = command.
.Ve
.Vb 2
\&  statement
\&    Get/set whether the sentence is a statement.
.Ve
.Vb 2
\&  question
\&    Get/set whether the sentence is a question.
.Ve
.Vb 2
\&  command
\&    Get/set whether the sentence is a command.
.Ve
.Vb 3
\&  best
\&    Finds the best parsing based on the number of words (more is better) 
\&    in the verb structure and obviousness of the leadoff verb.
.Ve
.Vb 6
\&  parse
\&    Performs the parsing of the object.  Takes three possible integer
\&    arguments (0|1|2).  0: always start parsing on exact matches to 
\&    helping verbs or modals; 1: always start parsing on verbs the are
\&    most frequently used as verbs; 2: allow any potential verb to start
\&    the parsing.  0 is default
.Ve
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Meyer<lt>chris@mytechs.com<gt>
.SH "COPYWRITE"
.IX Header "COPYWRITE"
.Vb 2
\&  Copywrite (c) 2002, Chris Meyer.  All rights reserved.  This is 
\&  free software and can be used under the same terms as Perl itself.
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&  1.02
.Ve
.SH "RELATED LIBRARIES"
.IX Header "RELATED LIBRARIES"
.Vb 5
\&  My heartfelt thanks to Adam Kilgarriff for his work on the BNC 
\&  (British National Corpus) which forms the basis for the word.db.
\&  I have added and massaged it a bit, but I would never have gotten
\&  this far without it.  The BNC can be visited at
\&  http://www.itri.brighton.ac.uc/~Adam.Kilgarriff/bnc-readme.html.
.Ve
.SH "DATA LOCATION"
.IX Header "DATA LOCATION"
.Vb 4
\&  Harvey uses algorithms AND data to work.  The program looks for 
\&  a file called 'system.dat' in the startup directory.  In this file
\&  it looks for a line that reads 'path=your_path', where your_path
\&  is the directory where the data resides.
.Ve
.SH "HARVEY"
.IX Header "HARVEY"
.Vb 2
\&  The accompanying Harvey module comes with a simple dialog routine 
\&  that uses Verb.pm to demonstrate the parsing of sentence.
.Ve
the perl manpage.
